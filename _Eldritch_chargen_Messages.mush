@@ --------------------Start Stuff-------------------
@vM me=#138

@wipe %vM

@vP %vM=[ansi(hw,CG:)]
@@ end

@@ --------------------CG Commands--------------------


&F.ALREADYAPPROVED %vM=[eval(%vP)] You are already approved and therefore cannot access chargen. Contact staff if you need to make changes to your +sheet.

&F.PENDINGAPP %vM=[eval(%vP)] You have already submitted your application to staff and therefore cannot further access chargen. Contact staff if you need to make changes to your pending +sheet.

&F.INPROGRESSAPP %vM=[eval(%vP)] You have already started chargen. Restarting now will erase any traits set to this point. If you would like to start over, type +cg/accept now.

&F.CGSTART %vM=[eval(%vP)] You are now beginning Eldritch Chargen. Use +cg/help to see what commands you can use and +cg/progress to determine what you still need to do.

&F.TYPEALREADYSET %vM=[eval(%vP)] You already have a type set. To reset your type, you must type +cg/start then +cg/accept, which will reset your stats.

&F.INVALIDTYPE %vM=[eval(%vP)] That is not a valid character type. Valid character types are [elist(iter(get([v(D.CGDB)]/D.TYPE_VALS),first(itext(),~),|))].

&F.SELECTTYPE %vM=[eval(%vP)] Your character type is now set to %0. You may use +cg/progress to view your chargen progress.


&F.INVALIDATTR %vM=[eval(%vP)] That attribute is not valid. Valid attributes include Strength, Dexterity, Constitution, Intelligence, Perception, and Willpower.
&F.INVALIDATTRVALUE %vM=[eval(%vP)] That is not a valid value for an attribute.
&F.ATTRVALUEOVERMAX %vM=[eval(%vP)] That value is over the maximum for that attribute. Please select a lower value.
&F.ATTRVALUEOVERMAXWITHBONUS %vM=[eval(%vP)] That value is over the maximum for that attribute when combined with a quality bonus you chose for that attribute. Please select a lower value.
&F.SUCCESSFULSETATTR %vM=[eval(%vP)] You have successfully set '%0' to '%1'.

@@ end

@@ --------------------Types DB--------------------
@@ &d.type_vals = <name>~<Attr points>~<skill points>~<spec points>~<qual points>~<drawback points>~<start drama>|<name>~<Attr points>~<skill points>~<spec points>~<qual points>~<drawback points>~<start drama>

@@ end

@@ --------------------Skills DB--------------------
@@ &D.SKILL_VALS = <skill 1>~<spec 1.1>~<spec 1.2>~<spec 1.3>|<skill 2>~<spec 2.1>~<spec 2.2>~<spec 2.3>|etc.

&F.SKILLEXISTSMSG %vM=[eval(%vP)] That skill already exists as '%q2' in the skill database.

&F.SKILLNOTEXISTSMSG %vM=[eval(%vP)] That skill does not exist in the skill database.

&F.ADDSKILLMSG %vM=[eval(%vP)] Added '[caplist(%0)]' to the skills database.

&F.REMSKILLMSG %vM=[eval(%vP)] Removed '%q2' from the skills database.

&F.SPECEXISTSMSG %vM=[eval(%vP)] That specialty already exists as '%q5' in the skills database.

&F.SPECNOTEXISTSMSG %vM=[eval(%vP)] That specialty does not exist in the skills database.

&F.ADDSPECMSG %vM=[eval(%vP)] Added '[caplist(%1)]' specialty to the '%0' skill in the skills database.

&F.REMSPECMSG %vM=[eval(%vP)] Removed '%q5' specialty from the '%q2' skill in the skills database.
@@ end

@@ --------------------Lang DB--------------------

&F.ADDLANGMSG %vM=[eval(%vP)] Added '[caplist(%0)]' language to the language database.

&F.REMLANGMSG %vM=[eval(%vP)] Removed '[elementsmux(%q0,%q1,|)]' language from the language database.

&F.LANGEXISTSMSG %vM=[eval(%vP)] That language already exists in the language database.

&F.LANGNOTEXISTSMSG %vM=[eval(%vP)] That language does not exist in the language database.
@@ end

@@ --------------------Qual DB--------------------

@@ &d.qual_<name> =<nice spaced name>|<has sub-types 1 or 0|<allowed subtype list separated by ~>|<requires note 1 or 0>|<cost in format of individual values separated by /, value range of integer values divided by :, or per level range encoded as 1 PL, separated by ~ if subs>|<description text>


&F.QDSHORTTOOLONGMSG %vM=[eval(%vP)] That short name is too long. The maximum length is 10.

&F.QDLONGTOOLONGMSG %vM=[eval(%vP)] That long name is too long. The maximum length is 34.

&F.QDINVALIDTRAITSMSG %vM=[eval(%vP)] The trait modification list specified is invalid. Trait modification lists must either be 'None' or follow the pattern of a ;-separated list of pairs in the format of <trait>=<bonus or reduction value>. Valid <trait>'s include any of the attribute names, any of the skill names, any skill/specialization pairs specified by a '/' between the skill name and specialization name, 'init' or 'initiative' for initiative, 'move' or 'movement' for fixed movement modification, 'surv' or 'survival' for survival rolls, 'fear' for fear tests, 'LP' or 'life points' for life points, 'ess' or 'essence' for essence, 'soak bash' for all bash soak, 'soak lethal' for all lethal soak, 'soak both' for both bash and lethal soak, 'soak <category>' for a special category soak like 'bullets' or 'fire'.


&F.QUALINVALIDCOSTMSG %vM=[eval(%vP)] The cost specified was not valid. The format must be a single numeric value, a list of values separated by /, a range of values separated by a colon (:) such as 1:5, or a per level cost via the format of a single numeric value followed by a space and 'PL' such as 1 PL.

&F.QUALCOSTCHANGEMSG %vM=[eval(%vP)] The cost for the '%0' quality has been set to '%1' in the qualities database.

&F.QUALHASSUBUSESUBCOSTMSG %vM=[eval(%vP)] That quality has sub-qualities. Use +qual/subcost <quality>/<sub>=<cost> to change the individual costs.

&F.QUALNOTHASSUBUSESUBCOSTMSG %vM=[eval(%vP)] That quality does not have sub-qualities. Use +qual/cost <quality>=<cost> to change its cost.

&F.QUALSUBCOSTCHANGEMSG %vM=[eval(%vP)] The cost for the '%0' quality's '%1' sub-quality has been set to '%2' in the qualities database.



&F.QUALEXISTSMSG %vM=[eval(%vP)] That quality already exists in the qualities database as '%0'.

&F.QUALNOTEXISTSMSG %vM=[eval(%vP)] That quality does not exist in the qualities database.

&F.QUALADDMSG %vM=[eval(%vP)] Added '%0' quality with '%1' long name to the qualities database.

&F.QUALNEWNAMEEXISTS %vM=[eval(%vP)] The '%0' name already exists under the '%1' quality in the qualities database.

&F.QUALNEWSUBNAMEEXISTS %vM=[eval(%vP)] The '%0' quality sub-name '%1' already exists as '%2' in the qualities database.

&F.QUALSUBNAMECHANGEMSG %vM=[eval(%vP)] Changed '%0' quality's '%1' sub-quality name to '%2' in the qualities database.

&F.QUALNAMECHANGEMSG %vM=[eval(%vP)] Changed '%0' quality's long name to '%1' in the qualities database.

&F.QUALREMMSG %vM=[eval(%vP)] Removed '%0' quality from the qualities database.

&F.QUALSUBEXISTSMSG %vM=[eval(%vP)] The '%0' quality '%1' sub-type already exists in the qualities database as '%2'.

&F.QUALSUBNOTEXISTSMSG %vM=[eval(%vP)] That quality sub-type does not exist in the qualities database.

&F.ADDQUALSUBMSG %vM=[eval(%vP)] Added '%1' sub-type to the '%0' quality in the qualities database.

&F.REMQUALSUBMSG %vM=[eval(%vP)] Removed '%1' sub-type from the '%0' quality in the qualities database.

&F.QUALREQNOTECHANGEMSG %vM=[eval(%vP)] Toggled the '%0' quality to [ifelse(%q2,,not%b)]require a note to be set when chosen from the qualities database.

&F.QUALDESCCHANGEDMSG %vM=[eval(%vP)] The description for the '%0' quality has been set to '%1' in the qualities database.

&F.QUALHASSUBUSESUBTRAITSMSG %vM=[eval(%vP)] That quality has sub-qualities. Use +qual/subtraits <quality>/<sub>=<Traits> to change the individual sub-quality trait modification lists.

&F.QUALNOTHASSUBUSESUBTRAITSMSG %vM=[eval(%vP)] That quality does not have sub-qualities. Use +qual/traits <quality=<Traits> to change its trait modification list.

&F.QUALTRAITSCHANGEMSG %vM=[eval(%vP)] The trait modification list for the '%0' quality has been set to '%1' in the qualities database.

&F.QUALSUBTRAITSCHANGEMSG %vM=[eval(%vP)] The trait modification list for the '%0' quality's '%1' sub-quality has been set to '%2' in the qualities database.






@@ end

@@ --------------------Draw DB--------------------

@@ &DRAW_<name> =<nice spaced name>|<has sub-types 1 or 0|<allowed subtype list separated by ~>|<requires note 1 or 0>|<cost in format of individual values separated by /, value range of integer values, open ended range via 1:N or N:-1>|<description text>

&F.DRAWINVALIDCOSTMSG %vM=[eval(%vP)] The value specified was not valid. The format must be a single numeric value, a list of values separated by /, a range of values separated by a colon (:) such as 1:5, or a per level cost via the format of a single numeric value followed by a space and 'PL' such as 1 PL.

&F.DRAWCOSTCHANGEMSG %vM=[eval(%vP)] The value for the '%0' drawback has been set to '%1' in the drawbacks database.

&F.DRAWHASSUBUSESUBCOSTMSG %vM=[eval(%vP)] That drawback has sub-drawbacks. Use +draw/subval <drawback>/<sub>=<value> to change the individual values.

&F.DRAWNOTHASSUBUSESUBCOSTMSG %vM=[eval(%vP)] That drawback does not have sub-drawbacks. Use +draw/val <drawback>=<cost> to change its value.

&F.DRAWSUBCOSTCHANGEMSG %vM=[eval(%vP)] The value for the '%0' drawback's '%1' sub-drawback has been set to '%2' in the drawbacks database.



&F.DRAWEXISTSMSG %vM=[eval(%vP)] That drawback already exists in the drawbacks database as '%0'.

&F.DRAWNOTEXISTSMSG %vM=[eval(%vP)] That drawback does not exist in the drawbacks database.

&F.DRAWADDMSG %vM=[eval(%vP)] Added '%0' drawback with '%1' long name to the drawbacks database.

&F.DRAWNEWNAMEEXISTS %vM=[eval(%vP)] The '%0' name already exists under the '%1' drawback in the drawbacks database.

&F.DRAWNEWSUBNAMEEXISTS %vM=[eval(%vP)] The '%0' drawback sub-name '%1' already exists as '%2' in the drawbacks database.

&F.DRAWSUBNAMECHANGEMSG %vM=[eval(%vP)] Changed '%0' drawback's '%1' sub-drawback name to '%2' in the drawbacks database.

&F.DRAWNAMECHANGEMSG %vM=[eval(%vP)] Changed '%0' drawback's long name to '%1' in the drawbacks database.

&F.DRAWREMMSG %vM=[eval(%vP)] Removed '%0' drawback from the drawbacks database.

&F.DRAWSUBEXISTSMSG %vM=[eval(%vP)] The '%0' drawback '%1' sub-type already exists in the drawbacks database as '%2'.

&F.DRAWSUBNOTEXISTSMSG %vM=[eval(%vP)] That drawback sub-type does not exist in the drawbacks database.

&F.ADDDRAWSUBMSG %vM=[eval(%vP)] Added '%1' sub-type to the '%0' drawback in the drawbacks database.

&F.REMDRAWSUBMSG %vM=[eval(%vP)] Removed '%1' sub-type from the '%0' drawback in the drawbacks database.

&F.DRAWREQNOTECHANGEMSG %vM=[eval(%vP)] Toggled the '%0' drawback to [ifelse(%q2,,not%b)]require a note to be set when chosen from the drawbacks database.

&F.DRAWDESCCHANGEDMSG %vM=[eval(%vP)] The description for the '%0' drawback has been set to '%1' in the drawbacks database.

&F.DRAWHASSUBUSESUBTRAITSMSG %vM=[eval(%vP)] That drawback has sub-drawbacks. Use +draw/subtraits <drawback>/<sub>=<Traits> to change the individual sub-drawback trait modification lists.

&F.DRAWNOTHASSUBUSESUBTRAITSMSG %vM=[eval(%vP)] That drawback does not have sub-drawbacks. Use +draw/traits <drawback=<Traits> to change its trait modification list.

&F.DRAWTRAITSCHANGEMSG %vM=[eval(%vP)] The trait modification list for the '%0' drawback has been set to '%1' in the drawbacks database.

&F.DRAWSUBTRAITSCHANGEMSG %vM=[eval(%vP)] The trait modification list for the '%0' drawback's '%1' sub-drawback has been set to '%2' in the drawbacks database.


@@ end

@@ --------------------Package DB--------------------
@@ &PKG_<name> =<long name>|<package attrs separated by ~>|<cost>
&F.PKGEXISTSMSG %vM=[eval(%vP)]

&F.PKGNOTEXISTSMSG %vM=[eval(%vP)]

&F.PKGADDMSG %vM=[eval(%vP)]

&F.PKGREMMSG %vM=[eval(%vP)]



@@ end
