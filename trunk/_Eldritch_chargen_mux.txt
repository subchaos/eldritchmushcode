@@ @create Eldritch Player Chargen Globals #134
@@ @create Eldritch Staff Chargen Globals #129
@@ @create Eldritch Chargen Database #128
@@ @create Eldritch Chargen Functions #137
@@ @create Eldritch Chargen Messages #138

@@ --------------------Sheet Commands--------------------


&D.SHEET.TEXT.COLOR #137=hw
&D.SHEET.VAL.COLOR #137=c
&D.SHEET.DOTLINE.COLOR #137=hx

&c.+sheet #134=$+sheet:@pemit %#=[header(Sheet for [name(%#)])]%r[u([v(D.FDB)]/F.DISPLAY_SHEET_HEADER,%#)][u([v(D.FDB)]/F.DISPLAY_SHEET_ATTRS,%#)][u([v(D.FDB)]/F.DISPLAY_SHEET_SKILLS,%#)][u([v(D.FDB)]/F.DISPLAY_SHEET_SPECS,%#)][u([v(D.FDB)]/F.DISPLAY_SHEET_LANGS,%#)][u([v(D.FDB)]/F.DISPLAY_SHEET_GRIMOIRE,%#)][u([v(D.FDB)]/F.DISPLAY_SHEET_QUALITIES,%#)][u([v(D.FDB)]/F.DISPLAY_SHEET_DRAWBACKS,%#)][u([v(D.FDB)]/F.DISPLAY_SHEET_OTHERTRAITS,%#)][tail()]

&F.DISPLAY_SHEET_HEADER #137=[ansi(v(D.SHEET.TEXT.COLOR), Name:)]%b[ansi(v(D.SHEET.VAL.COLOR), ljust(strtrunc(default(%0/fullname,cname(%0)),25),25))]%b[ansi(v(D.SHEET.TEXT.COLOR), ljust(Race:,9))][ansi(v(D.SHEET.VAL.COLOR),ljust(strtrunc(default(%0/D.RACE,None),20),20))]%b[ansi(v(D.SHEET.TEXT.COLOR), ljust(Age:,8))][ansi(v(D.SHEET.VAL.COLOR),ljust(strtrunc(default(%0/AGE,None),7),7))]%r[ansi(v(D.SHEET.TEXT.COLOR), Type:)]%b[ansi(v(D.SHEET.VAL.COLOR), ljust(strtrunc(default(%0/D.CHARTYPE,none),25),25))]%b[ansi(v(D.SHEET.TEXT.COLOR), ljust(Species:,9))][ansi(v(D.SHEET.VAL.COLOR),ljust(strtrunc(default(%0/D.SPECIES,None),20),20))]%b[ansi(v(D.SHEET.TEXT.COLOR), ljust(Gender:,8))][ansi(v(D.SHEET.VAL.COLOR),ljust(strtrunc(default(%0/SEX,None),7),7))]%r

&F.DISPLAY_SHEET_ATTRSKILL #137=[ansi(v(D.SHEET.TEXT.COLOR),%1)][ansi(v(D.SHEET.DOTLINE.COLOR),repeat(.,sub(sub(24,strlen(%1)),strlen(setr(9,[default(%0/%2,0)])))))][ansi(v(D.SHEET.VAL.COLOR),%q9)]%b%b%b[ansi(v(D.SHEET.TEXT.COLOR),%3)][ansi(v(D.SHEET.DOTLINE.COLOR),repeat(.,sub(sub(24,strlen(%3)),strlen(setr(9,[default(%0/%4,0)])))))][ansi(v(D.SHEET.VAL.COLOR),%q9)]%b%b%b[ansi(v(D.SHEET.TEXT.COLOR),%5)][ansi(v(D.SHEET.DOTLINE.COLOR),repeat(.,sub(sub(24,strlen(%5)),strlen(setr(9,[default(%0/%6,0)])))))][ansi(v(D.SHEET.VAL.COLOR),%q9)]

&F.DISPLAY_SHEET_ATTRS #137=[cseparator(Attributes)]%r[u([v(D.FDB)]/F.DISPLAY_SHEET_ATTRSKILL, %0, Strength, D.ATTR_STRENGTH, Dexterity, D.ATTR_Dexterity, Constitution, D.ATTR_CONSTITUTION)]%r[u([v(D.FDB)]/F.DISPLAY_SHEET_ATTRSKILL, %0, Intelligence, D.ATTR_INTELLIGENCE, Perception, D.ATTR_PERCEPTION, Willpower, D.ATTR_WILLPOWER)]%r

&F.DISPLAY_SHEET_SKILLS #137=[cseparator(Skills)]%r[setq(C,0)][iter(trim(iter(get([v(D.CGDB)]/D.SKILL_VALS),[first(itext(),~)][ifelse(eq(setr(C,inc(%qC)),3),|[setq(C,0)],~)],|),b,|), u([v(D.FDB)]/F.DISPLAY_SHEET_ATTRSKILL, %0, setr(9,trim(first(itext(),~))), D.SKILLS_%q9, setr(9,trim(elementsmux(itext(), 2, ~))), D.SKILLS_%q9, setr(9,trim(last(itext(),~))), D.SKILLS_%q9),|,%r)]%r

&F.DISPLAY_SHEET_SPECS #137=[cseparator(Specialties)]%r

&F.DISPLAY_SHEET_LANGS #137=[cseparator(Languages)]%r

&F.DISPLAY_SHEET_GRIMOIRE #137=[cseparator(Grimoire)]%r

&F.DISPLAY_SHEET_QUALITIES #137=[cseparator(Qualities)]%r

&F.DISPLAY_SHEET_DRAWBACKS #137=[cseparator(Drawbacks)]%r

&F.DISPLAY_SHEET_OTHERTRAITS #137=[cseparator(Other Traits)]%r[ansi(v(D.SHEET.TEXT.COLOR),Initiative)][ansi(v(D.SHEET.DOTLINE.COLOR),repeat(.,sub(14,strlen(setr(9,[default(%0/D.INIT,0)])))))][ansi(v(D.SHEET.VAL.COLOR),%q9)]%b%b%b[ansi(v(D.SHEET.TEXT.COLOR),Movement)][ansi(v(D.SHEET.DOTLINE.COLOR),repeat(.,sub(16,strlen(setr(9,[default(%0/D.MOVEMENT,0)])))))][ansi(v(D.SHEET.VAL.COLOR),%q9)]%b%b%b[ansi(v(D.SHEET.TEXT.COLOR),Drama Points)][ansi(v(D.SHEET.DOTLINE.COLOR),repeat(.,sub(12,strlen(setr(9,[default(%0/D.DRAMA,0)])))))][ansi(v(D.SHEET.VAL.COLOR),%q9)]%r[ansi(v(D.SHEET.TEXT.COLOR),Life Points)][ansi(v(D.SHEET.DOTLINE.COLOR),repeat(.,sub(13,strlen(setr(9,[default(%0/D.CURRLP,0)]/[default(%0/D.TOTLP,0)])))))][ansi(v(D.SHEET.VAL.COLOR),%q9)]%b%b%b[ansi(v(D.SHEET.TEXT.COLOR),Soak)][ansi(v(D.SHEET.DOTLINE.COLOR),repeat(.,sub(20,strlen(setr(9,[default(%0/D.SOAK,0)])))))][ansi(v(D.SHEET.VAL.COLOR),%q9)]%b%b%b[ansi(v(D.SHEET.TEXT.COLOR),Essence)][ansi(v(D.SHEET.DOTLINE.COLOR),repeat(.,sub(17,strlen(setr(9,[default(%0/D.CURRESS,0)]/[default(%0/D.TOTESS,0)])))))][ansi(v(D.SHEET.VAL.COLOR),%q9)]%r


D.CURRLP
D.TOTLP
D.SOAK
D.CURRESS
D.TOTESS

------------------------------------Skills------------------------------------
Acrobatics............XX  Art...................XX  Brawl.................XX
Computer..............XX  Control...............XX  Craft.................XX
Empathy...............XX  Expression............XX  Influence.............XX
Knowledge.............XX  Languages.............XX  Larceny...............XX
Marksman..............XX  Medicine..............XX  Melee.................XX
Notice................XX  Occult................XX  Perform...............XX
Science...............XX  Sports................XX  Thrown................XX
----------------------------------Specialties---------------------------------
Jumping <ACR>.........XX  Jumping <ACR>.........XX  Jumping <ACR>.........XX
-----------------------------------Languages----------------------------------
Latin.................XX  Swahili...............XX  Bob's Sekrit Kode.....XX

-----------------------------------Grimoire-----------------------------------

-----------------------------------Qualities----------------------------------
Increased Life Points .............XX  Increased Life Points .............XX
-----------------------------------Drawbacks----------------------------------
XXXXXXXXXXXXXXXXXXXXXXXXXXXXX XX (-XX) XXXXXXXXXXXXXXXXXXXXXXXXXXXXX XX (-XX)
XXXXXXXXXXXXXXXXXXXXXXXXXXXXX XX (-XX) XXXXXXXXXXXXXXXXXXXXXXXXXXXXX XX (-XX)
---------------------------------Other Traits---------------------------------
Initiative............XX  Movement...........XXXXX  Drama Points.......XXXXX
Life Points......XXX/XXX  Soak.................XXX  Essence........XXXX/XXXX
------------------------------------------------------------------------------


@@ --------------------CG Commands--------------------


&F.ALREADYAPPROVED #138=[u(D.CGPREFIX)] You are already approved and therefore cannot go through chargen again. Contact staff if you need to make changes to your +sheet.

&F.PENDINGAPP #138=[u(D.CGPREFIX)] You have already submitted your application to staff and therefore cannot go through chargen again. Contact staff if you need to make changes to your pending +sheet.

&F.INPROGRESSAPP #138=[u(D.CGPREFIX)] You have already started chargen. Restarting now will erase any traits set to this point. If you would like to start over, type +cg/accept now.

&F.CGSTART #138=[u(D.CGPREFIX)] You are now beginning Eldritch Chargen. Use +cg/help to see what commands you can use and +cg/progress to determine what you still need to do.




&F.CANSTARTCG #137=switch(1, isapproved(%0), 0[setq(M,u([u([v(D.MSGDB)]/F.ALREADYAPPROVED))], strmatch(get(%0/D.CG.APPROVED),PENDING*), 0[setq(M,u([u([v(D.MSGDB)]/F.PENDINGAPP))], strmatch(get(%0/D.CG.APPROVED),IN PROGRESS*), 1[setq(M,u([u([v(D.MSGDB)]/F.INPROGRESSAPP))], 2[setq(M,u([u([v(D.MSGDB)]/F.CGSTART))])

&T.SETUPBASESTATS #137=@dol/delimit | [get([v(D.CGDB)]/D.ATTR_VALS)]={&D.ATTR_## %0= 0};@dol/delimit | [get([v(D.CGDB)]/D.SKILL_VALS)]={&D.SKILL_[first(##,~)] %0= 0};



&c.+cg/start #134=$+cg/start:@swi u([v(D.FDB)]/F.CANSTARTCG, %#)=0, {@pemit %#=%qM}, 1, {@pemit %#=%qM;&D.CG.CANRESETSTATS %#=1;@wait 3600=&D.CG.CANRESETSTATS %#}, 2, {}

&+cg/accept #134=$+cg/accept:@swi get(%#/D.CG.CANRESETSTATS)=1, {&D.CG.APPROVED %#}, {@pemit %#=huh()}

&+cg/selecttype #134=$+cg/selecttype *:
&+cg/progress #134=$+cg/progress:
&+cg/progress #134=$+cg/progress *:

&+cg/setattr #134=$+cg/setattr *=*:

&+cg/setskill #134=$+cg/setskill *=*:

&+cg/addspec #134=$+cg/addspec */*=*:
&+cg/remspec #134=$+cg/remspec */*:
&+cg/requestspe #134=$+cg/requestspec */*=*:

&+cg/addlang #134=$+cg/addlang *=*:
&+cg/remlang #134=$+cg/remlang *:

&+cg/addqual #134=$+cg/addqual *=*:
&+cg/remqual #134=$+cg/remqual *:
&+cg/adddraw #134=$+cg/adddraw *=*:
&+cg/remdraw #134=$+cg/remdraw *:
&+cg/qdrating #134=$+cg/qdrating *=*:
&+cg/qdnote #134=$+cg/qdnote *=*:


&+cg/finish #134=$+cg/finish:

@@ --------------------List Commands--------------------

  +attr/list


&c.+skill/list #134=$+skill/list:@pemit %#=[repeat(-,78)]%r[iter(get([v(D.CGDB)]/D.SKILL_VALS),first(itext(),~),|,%r)]%r[repeat(-,78)]

&c.+spec/list #134=$+spec/list:@pemit %#=[repeat(-,78)]%r[iter(get([v(D.CGDB)]/D.SKILL_VALS),[ansi(hw, first(itext(),~))][ifelse(gt(words(itext(),~),1),: [iter(rest(itext(),~),[itext(0)],~,%,%b)])],|,%r)]%r[repeat(-,78)]

&f.displayqdlist #137=[repeat(-,78)]%r[ansi(hw,Short Name%b%bLong Name[space(26)]Subs? Note? Cost)]%r[iter(sort(lattr([v(D.CGDB)]/D.%0_*)),u([v(D.FDB)]/F.FORMATQDLIST,##,+%0),,%r)]%r[repeat(-,78)]

&f.formatqdlist #137=[setq(0,get([v(D.CGDB)]/%0))][ljust(after(%0,_),12)][ljust(first(%q0,|),35)][ljust(ifelse(elementsmux(%q0,v(D.QDSUBIDX),|),Yes,No),6)][ljust(ifelse(elementsmux(%q0,v(D.QDNOTEIDX),|),Yes,No),6)][ifelse(andchr(elementsmux(%q0,v(D.QDCOSTIDX),|),~),See %1/info, u([v(D.FDB)]/F.FORMATQDCOST,elementsmux(%q0,v(D.QDCOSTIDX),|)))]

&f.formatqdcost #137=edit(edit(edit(%0,/,%bor%b),:,%bto%b),%bPL, %b/%bLevel)

&c.+qual/list #134=$+qual/list:@pemit %#=u([v(D.FDB)]/F.DISPLAYQDLIST,qual)

&c.+draw/list #134=$+draw/list:@pemit %#=u([v(D.FDB)]/F.DISPLAYQDLIST,draw)


&f.displayqdinfo #137=switch(u([v(D.FDB)]/F.MATCHQD, ucstr(%1), %0), 0, u([v(D.MSGDB)]/F.QUALNOTEXISTSMSG, %0), 1, [repeat(-,78)]%r[ansi(hw,Short Name:)] [ucstr(after(%q0,_))]%r[ansi(hw,Long Name:)] [first(%q1,|)]%r[ansi(hw,Requires Note:)] [ifelse(elementsmux(%q1,v(D.QDNOTEIDX),|),Yes,No)]%r[ifelse(elementsmux(%q1,v(D.QDSUBIDX),|), [repeat(-,78)]%r[ljust(ansi(hw,Sub-type Name),34)][ansi(hw,Sub-type Cost)]%r[setq(9,elementsmux(%q1,v(D.QDSUBLISTIDX),|))][setq(8,elementsmux(%q1,v(D.QDCOSTIDX),|))][iter(%q9,[ljust(itext(),34)][u([v(D.FDB)]/F.FORMATQDCOST,elementsmux(%q8,inum(),~))],~,%r)], [ansi(hw,Cost:)] [u([v(D.FDB)]/F.FORMATQDCOST,elementsmux(%q1,v(D.QDCOSTIDX),|))])]%r[repeat(-,78)]%r[ansi(hw,Description:)]%b[last(%q1,|)]%r[repeat(-,78)])

&c.+qual/sub #134=$+qual/info *:@pemit %#=u([v(D.FDB)]/F.DISPLAYQDINFO,%0,qual)

&c.+draw/sub #134=$+draw/info *:@pemit %#=u([v(D.FDB)]/F.DISPLAYQDINFO,%0,draw)






@@ --------------------Skills DB--------------------
@@ &D.SKILL_VALS = <skill 1>~<spec 1.1>~<spec 1.2>~<spec 1.3>|<skill 2>~<spec 2.1>~<spec 2.2>~<spec 2.3>|etc.

&D.CGPREFIX #138=[ansi(hw,CG:)]

&F.SKILLEXISTSMSG #138=[u(D.CGPREFIX)] That skill already exists as '%q2' in the skill database.

&F.SKILLNOTEXISTSMSG #138=[u(D.CGPREFIX)] That skill does not exist in the skill database.

&F.ADDSKILLMSG #138=[u(D.CGPREFIX)] Added '[caplist(%0)]' to the skills database.

&F.REMSKILLMSG #138=[u(D.CGPREFIX)] Removed '%q2' from the skills database.

&F.SPECEXISTSMSG #138=[u(D.CGPREFIX)] That specialty already exists as '%q5' in the skills database.

&F.SPECNOTEXISTSMSG #138=[u(D.CGPREFIX)] That specialty does not exist in the skills database.

&F.ADDSPECMSG #138=[u(D.CGPREFIX)] Added '[caplist(%1)]' specialty to the '%0' skill in the skills database.

&F.REMSPECMSG #138=[u(D.CGPREFIX)] Removed '%q5' specialty from the '%q2' skill in the skills database.


&R.F.MATCHSKILL #137=This function will return 1 if a skill %%0 is matched against the the <skill name>* pattern in the skills database and will set the %%q0 to be the skills database list and %%q1 to be the position in that list where a match was found.
&F.MATCHSKILL #137=[gt(setr(1, match(setr(0, get([v(D.CGDB)]/D.SKILL_VALS)), %0*,|)),0)][setq(2,first(elementsmux(%q0,%q1,|),~))]

&R.F.MATCHSPEC #137=This function will return 1 if a skill specialty %%2 is matched against the <spec name>* pattern in a sub-list of the skills database found at position %%1 or the list passed in as %%0.
&F.MATCHSPEC #137=[gt(setr(4, match(setr(3, elementsmux(%0, %1, |)), %2*, ~)),0)][setq(5,elementsmux(%q3,%q4,~))]


&c.+skill/add #129=$+skill/add *:@swi/first u([v(D.FDB)]/F.MATCHSKILL,%0)=1,{@pemit %#=[u([v(D.MSGDB)]/F.SKILLEXISTSMSG,%0)]}, 0,{&D.SKILL_VALS [v(D.CGDB)]=[addelement(%q0,%0)];@pemit %#=[u([v(D.MSGDB)]/F.ADDSKILLMSG,%0)]}

&c.+skill/rem #129=$+skill/rem *:@swi/first u([v(D.FDB)]/F.MATCHSKILL, %0)=0,{@pemit %#=[u([v(D.MSGDB)]/F.SKILLNOTEXISTSMSG, %0)]}, 1,{&D.SKILL_VALS [v(D.CGDB)]=[remelement(%q0, %q1)];@pemit %#=[u([v(D.MSGDB)]/F.REMSKILLMSG, %0)]}

&c.+spec/add #129=$+spec/add */*:@swi/first u([v(D.FDB)]/F.MATCHSKILL,%0)=0,{@pemit %#=[u([v(D.MSGDB)]/F.SKILLNOTEXISTSMSG,%0,%1)]}, 1, {@swi/first u([v(D.FDB)]/F.MATCHSPEC, %q0, %q1, %1)=1,{@pemit %#=[u([v(D.MSGDB)]/F.SPECEXISTSMSG,%0,%1)]}, 0,{&D.SKILL_VALS [v(D.CGDB)]=[addsub(%q0,%q1,%1)];@pemit %#=[u([v(D.MSGDB)]/F.ADDSPECMSG,%0,%1)]}}

&c.+spec/rem #129=$+spec/rem */*: @swi/first u([v(D.FDB)]/F.MATCHSKILL,%0)=0,{@pemit %#=[u([v(D.MSGDB)]/F.SKILLNOTEXISTSMSG,%0,%1)]}, 1, {@swi/first u([v(D.FDB)]/F.MATCHSPEC, %q0, %q1, %1)=0,{@pemit %#=[u([v(D.MSGDB)]/F.SPECNOTEXISTSMSG,%0,%1)]}, 1,{&D.SKILL_VALS [v(D.CGDB)]=[remsub(%q0, %q1, %q4)];@pemit %#=[u([v(D.MSGDB)]/F.REMSPECMSG,%0,%1)]}}


@@ --------------------Lang DB--------------------

&F.MATCHLANG #137=[gt(setr(1, match(setr(0, get([v(D.CGDB)]/D.LANG_VALS)), %0*, |)),0)]


&F.ADDLANGMSG #138=[u(D.CGPREFIX)] Added '[caplist(%0)]' language to the language database.

&F.REMLANGMSG #138=[u(D.CGPREFIX)] Removed '[elementsmux(%q0,%q1,|)]' language from the language database.

&F.LANGEXISTSMSG #138=[u(D.CGPREFIX)] That language already exists in the language database.

&F.LANGNOTEXISTSMSG #138=[u(D.CGPREFIX)] That language does not exist in the language database.


&c.+lang/add #129=$+lang/add *:@swi/first u([v(D.FDB)]/F.MATCHLANG,%0)=1,{@pemit %#=[u([v(D.MSGDB)]/F.LANGEXISTSMSG,%0)]}, 0,{&D.LANG_VALS [v(D.CGDB)]=[addelement(%q0, %0)];@pemit %#=[u([v(D.MSGDB)]/F.ADDLANGMSG,%0)]}

&c.+lang/rem #129=$+lang/rem *:@swi/first u([v(D.FDB)]/F.MATCHLANG,%0)=0,{@pemit %#=[u([v(D.MSGDB)]/F.LANGNOTEXISTSMSG,%0)]},1,{&D.LANG_VALS [v(D.CGDB)]=[remelement(%q0, %q1)];@pemit %#=[u([v(D.MSGDB)]/F.REMLANGMSG,%0)]}


@@ --------------------Qual DB--------------------

@@ &d.qual_<name> =<nice spaced name>|<has sub-types 1 or 0|<allowed subtype list separated by ~>|<requires note 1 or 0>|<cost in format of individual values separated by /, value range of integer values divided by :, or per level range encoded as 1 PL, separated by ~ if subs>|<description text>



&D.QDNAMEIDX #129=1
&D.QDSUBIDX #129=2
&D.QDSUBLISTIDX #129=3
&D.QDNOTEIDX #129=4
&D.QDCOSTIDX #129=5
&D.QDDESCIDX #129=6

&D.QDNAMEIDX #134=1
&D.QDSUBIDX #134=2
&D.QDSUBLISTIDX #134=3
&D.QDNOTEIDX #134=4
&D.QDCOSTIDX #134=5
&D.QDDESCIDX #134=6

&D.QDNAMEIDX #137=1
&D.QDSUBIDX #137=2
&D.QDSUBLISTIDX #137=3
&D.QDNOTEIDX #137=4
&D.QDCOSTIDX #137=5
&D.QDDESCIDX #137=6



&F.GETQDATTRS #137=lattr([v(D.CGDB)]/D.%0_*)

&F.MATCHQDLONG #137=[ifelse(words(setr(9,u([v(D.FDB)]/F.GETQDATTRS,%0))),[setq(8,)][setq(9,iter(%q9,ifelse(gt(strmatch(first(get([v(D.CGDB)]/[itext()]),|),%1*),0),[setq(0,itext())][setq(8,itext())][setq(1,get([v(D.CGDB)]/[itext()]))][ibreak()])))][ifelse(strlen(%q8),1,0)],0)]

&F.MATCHQDSHORT #137=ifelse(hasattr([v(D.CGDB)]/D.%0_[edit(%1,%b,_)]),1[setq(1,get([v(D.CGDB)]/[setr(0, D.%0_[edit(%1,%b,_)])]))],0)

&F.MATCHQD #137=or(u([v(D.FDB)]/F.MATCHQDSHORT,%0, %1),u([v(D.FDB)]/F.MATCHQDLONG, %0, %1))

&F.MATCHQDSUB #137=[gt(setr(3, match(setr(2, elementsmux(%0, v(D.QDSUBLISTIDX), |)), [caplist(%1)]*, ~)), 0)][setq(4,getsub(%0,v(D.QDSUBLISTIDX),%q3))]

&F.HASQDSUB #137=elementsmux(%0,v(D.QDSUBIDX),|)

&F.ADDQD #137=%0|0||0||

&F.ADDQDSUB #137=[setq(9,replace(%0, v(D.QDSUBLISTIDX), [ifelse(words(setr(8,elementsmux(%0, v(D.QDSUBLISTIDX),|)),~),%q8~)]%1, |))][setq(9,replace(%q9, v(D.QDSUBIDX), 1, |))][replace(%q9, v(D.QDCOSTIDX), [ifelse(words(setr(8,elementsmux(%q9, v(D.QDCOSTIDX),|)),~),%q8~)]0, |)]

&F.REMQDSUB #137=[setq(9, replace(%0, v(D.QDSUBLISTIDX), remove(setr(8, elementsmux(%0, v(D.QDSUBLISTIDX), |)), %1, ~), |))][setq(9,replace(%q9, v(D.QDSUBIDX), ifelse(gt(words(elementsmux(%q9, v(D.QDSUBLISTIDX), |), ~), 0), 1, 0), |))][replace(%q9, v(D.QDCOSTIDX), remove(setr(8, elementsmux(%q9, v(D.QDCOSTIDX), |)), elementsmux(%q8, %2, ~), ~), |)]


&F.CHANGEQDREQNOTE #137=replace(%0, v(D.QDNOTEIDX), setr(2, ifelse(elementsmux(%0, v(D.QDNOTEIDX), |), 0, 1)), |)

&F.QDLENGTHCHECK #137=lte(strlen(%1),switch(%0,SHORT,10,LONG,34,-1))

&F.QDSHORTTOOLONG #137=[u(D.CGPREFIX)] That short name is too long. The maximum length is 10.

&F.QDLONGTOOLONG #137=[u(D.CGPREFIX)] That long name is too long. The maximum length is 34.

&F.CHANGEQDCOST #137=replace(%0, v(D.QDCOSTIDX),%1,|)

&F.CHANGEQDSUBCOST #137=replace(%0, v(D.QDCOSTIDX), replace(elementsmux(%0, v(D.QDCOSTIDX), |), %1, %2, ~), |)

&F.CHANGEQDDESC #137=replace(%0, v(D.QDDESCIDX),%1,|)

&F.ISPOSNUM #137=and(isnum(%0),not(andchr(%0,-)))

&F.ISNEGNUM #137=and(isnum(%0),andchr(%0,-))

&F.ISVALIDQUALCOST.SINGLE #137=u([v(D.FDB)]/F.ISPOSNUM,%0)

&F.ISVALIDQUALCOST.LIST #137=and(andchr(%0,/),[iter(%0,ifelse(u([v(D.FDB)]/F.ISPOSNUM,itext()),[setq(9,1)],[setq(9,0)][ibreak()]),/)]%q9)

&F.ISVALIDQUALCOST.RANGE #137=and(andchr(%0,:),[setq(8,before(%0,:))][setq(9,after(%0,:))][and(u([v(D.FDB)]/F.ISPOSNUM,%q8),u([v(D.FDB)]/F.ISPOSNUM,%q9))])

&F.ISVALIDQUALCOST.PERLVL #137=and(andchr(%0,%bPL),u([v(D.FDB)]/F.ISPOSNUM,before(%0,PL)))

&F.ISVALIDQUALCOST #137=or(u([v(D.FDB)]/F.ISVALIDQUALCOST.SINGLE,%0),u([v(D.FDB)]/F.ISVALIDQUALCOST.LIST,%0),u([v(D.FDB)]/F.ISVALIDQUALCOST.RANGE,%0),u([v(D.FDB)]/F.ISVALIDQUALCOST.PERLVL,%0))


&F.QUALINVALIDCOSTMSG #138=[u(D.CGPREFIX)] The cost specified was not valid. The format must be a single numeric value, a list of values separated by /, a range of values separated by a colon (:) such as 1:5, or a per level cost via in format of a single numeric value followed by a space and 'PL' such as 1 PL.

&F.QUALEXISTSMSG #138=[u(D.CGPREFIX)] That quality already exists in the qualities database as '[after(%q0,_)]'.

&F.QUALNOTEXISTSMSG #138=[u(D.CGPREFIX)] That quality does not exist in the qualities database.

&F.QUALADDMSG #138=[u(D.CGPREFIX)] Added '[ucstr(edit(%0,%b,_))]' quality with '[caplist(%1)]' long name to the qualities database.

&F.QUALREMMSG #138=[u(D.CGPREFIX)] Removed '[ucstr(after(%q0,_))]' quality from the qualities database.

&F.QUALSUBEXISTSMSG #138=[u(D.CGPREFIX)] That quality sub-type already exists in the qualities database as '%q4'.

&F.QUALSUBNOTEXISTSMSG #138=[u(D.CGPREFIX)] That quality sub-type does not exist in the qualities database.

&F.ADDQUALSUBMSG #138=[u(D.CGPREFIX)] Added '[caplist(%1)]' sub-type to the '[ucstr(after(%q0,_))]' quality in the qualities database.

&F.REMQUALSUBMSG #138=[u(D.CGPREFIX)] Removed '%q4' sub-type from the '[ucstr(after(%q0,_))]' quality in the qualities database.

&F.QUALREQNOTECHANGEMSG #138=[u(D.CGPREFIX)] Toggled '[after(%q0,_)]' to [ifelse(%q2,,not%b)]require a note to be set when chosen from the qualities database.

&F.QUALDESCCHANGEDMSG #138=[u(D.CGPREFIX)] The description for the '[after(%q0,_)]' quality has been set to '%1' in the qualities database.

&F.QUALCOSTCHANGEMSG #138=[u(D.CGPREFIX)] The cost for the '[ucstr(after(%q0,_))]' quality has been set to '%1' in the qualities database.

&F.QUALHASSUBUSESUBCOSTMSG #138=[u(D.CGPREFIX)] That quality has sub-qualities. Use +qual/subcost <quality>/<sub>=<cost> to change the individual costs.

&F.QUALNOTHASSUBUSESUBCOSTMSG #138=[u(D.CGPREFIX)] That quality does not have sub-qualities. Use +qual/cost <quality>=<cost> to change its cost.

&F.QUALSUBCOSTCHANGEMSG #138=[u(D.CGPREFIX)] The cost for the '[ucstr(after(%q0,_))]' quality's '%q4' sub-quality has been set to '%2' in the qualities database.



&c.+qual/add #129=$+qual/add */*:@swi/first [u([v(D.FDB)]/F.MATCHQDSHORT,QUAL, %0)][u([v(D.FDB)]/F.MATCHQDLONG,QUAL,caplist(%1))]=1*,{@pemit %#=[u([v(D.MSGDB)]/F.QUALEXISTSMSG,%0,%1)]},*1,{@pemit %#=[u([v(D.MSGDB)]/F.QUALEXISTSMSG,%0,%1)]},00,{@swi/first [u([v(D.FDB)]/F.QDLENGTHCHECK,SHORT,%0)][u([v(D.FDB)]/F.QDLENGTHCHECK,LONG,%1)]=0*,{@pemit %#=[u([v(D.MSGDB)]/F.QDSHORTTOOLONG,%0,%1)]},*0,{@pemit %#=[u([v(D.MSGDB)]/F.QDLONGTOOLONG,%0,%1)]},11,{&D.QUAL_[edit(%0,%b,_)] [v(D.CGDB)]=[u([v(D.FDB)]/F.ADDQD,caplist(%1))];@attribute/access D.QUAL_[edit(%0,%b,_)]=royalty pinvisible;@pemit %#=[u([v(D.MSGDB)]/F.QUALADDMSG,%0,%1)]}}

&c.+qual/rem #129=$+qual/rem *:@swi/first u([v(D.FDB)]/F.MATCHQD,QUAL,%0)=0,{@pemit %#=[u([v(D.MSGDB)]/F.QUALNOTEXISTSMSG,%0)]}, 1,{@wipe [v(D.CGDB)]/%q0;@pemit %#=[u([v(D.MSGDB)]/F.QUALREMMSG,%0)]}

&c.+qual/addsub #129=$+qual/addsub */*:@swi/first u([v(D.FDB)]/F.MATCHQD,QUAL,%0)=0,{@pemit %#=[u([v(D.MSGDB)]/F.QUALNOTEXISTSMSG,%0)]}, 1,{@swi/first u([v(D.FDB)]/F.MATCHQDSUB,%q1,%1)=1,{@pemit %#=[u([v(D.MSGDB)]/F.QUALSUBEXISTSMSG)]}, 0,{&%q0 [v(D.CGDB)]=[u([v(D.FDB)]/F.ADDQDSUB, %q1, caplist(%1))];@pemit %#=[u([v(D.MSGDB)]/F.ADDQUALSUBMSG,%0, %1)]}}

&c.+qual/remsub #129=$+qual/remsub */*:@swi/first u([v(D.FDB)]/F.MATCHQD,QUAL,%0)=0,{@pemit %#=[u([v(D.MSGDB)]/F.QUALNOTEXISTSMSG,%0)]}, 1,{@swi/first u([v(D.FDB)]/F.MATCHQDSUB,%q1,caplist(%1))=0,{@pemit %#=[u([v(D.MSGDB)]/F.QUALSUBNOTEXISTSMSG)]}, 1,{&%q0 [v(D.CGDB)]=[u([v(D.FDB)]/F.REMQDSUB, %q1, %q4, %q3)];@pemit %#=[u([v(D.MSGDB)]/F.REMQUALSUBMSG,%0, %q4)]}}

&c.+qual/reqnote #129=$+qual/reqnote *:@swi/first u([v(D.FDB)]/F.MATCHQD,QUAL,%0)=0,{@pemit %#=[u([v(D.MSGDB)]/F.QUALNOTEXISTSMSG,%0)]}, 1,{&%q0 [v(D.CGDB)]=[u([v(D.FDB)]/F.CHANGEQDREQNOTE, %q1)];@pemit %#=[u([v(D.MSGDB)]/F.QUALREQNOTECHANGEMSG,%0)]}

&c.+qual/cost #129=$+qual/cost *=*:@swi/first u([v(D.FDB)]/F.MATCHQD,QUAL,%0)=0,{@pemit %#=[u([v(D.MSGDB)]/F.QUALNOTEXISTSMSG,%0,%1)]}, 1,{@swi/first u([V(D.FDB)]/F.HASQDSUB,%q1) = 1,{@pemit %#=[u([v(D.MSGDB)]/F.QUALHASSUBUSESUBCOSTMSG,%0,%1)]}, 0,{@swi/first u([v(D.FDB)]/F.ISVALIDQUALCOST,%1)=0,{@pemit %#=[u([v(D.MSGDB)]/F.QUALINVALIDCOSTMSG,%0,ucstr(%1))]}, 1,{&%q0 [v(D.CGDB)]=[u([v(D.FDB)]/F.CHANGEQDCOST, %q1, ucstr(%1))];@pemit %#=[u([v(D.MSGDB)]/F.QUALCOSTCHANGEMSG,%0,ucstr(%1))]}}}

&c.+qual/subcost #129=$+qual/subcost */*=*:@swi/first u([v(D.FDB)]/F.MATCHQD,QUAL,%0)=0,{@pemit %#=[u([v(D.MSGDB)]/F.QUALNOTEXISTSMSG,%0,%1)]}, 1,{@swi/first u([V(D.FDB)]/F.HASQDSUB,%q1) = 0,{@pemit %#=[u([v(D.MSGDB)]/F.QUALNOTHASSUBUSESUBCOSTMSG,%0,%1)]}, 1, {@swi/first u([v(D.FDB)]/F.MATCHQDSUB,%q1,caplist(%1))=0,{@pemit %#=[u([v(D.MSGDB)]/F.QUALSUBNOTEXISTSMSG)]}, 1,{@swi/first u([v(D.FDB)]/F.ISVALIDQUALCOST,%2)=0,{@pemit %#=[u([v(D.MSGDB)]/F.QUALINVALIDCOSTMSG,%0,%1,ucstr(%2))]}, 1,{&%q0 [v(D.CGDB)]=[u([v(D.FDB)]/F.CHANGEQDSUBCOST, %q1, %q3, ucstr(%2))];@pemit %#=[u([v(D.MSGDB)]/F.QUALSUBCOSTCHANGEMSG,%0,%1,ucstr(%2))]}}}}

&c.+qual/desc #129=$+qual/desc *=*:@swi/first u([v(D.FDB)]/F.MATCHQD,QUAL,%0)=0,{@pemit %#=[u([v(D.MSGDB)]/F.QUALNOTEXISTSMSG,%0)]}, 1,{&%q0 [v(D.CGDB)]=[u([v(D.FDB)]/F.CHANGEQDDESC, %q1, %1)];@pemit %#=[u([v(D.MSGDB)]/F.QUALDESCCHANGEDMSG,%0,%1)]}


@@ --------------------Draw DB--------------------

@@ &DRAW_<name> =<nice spaced name>|<has sub-types 1 or 0|<allowed subtype list separated by ~>|<requires note 1 or 0>|<cost in format of individual values separated by /, value range of integer values, open ended range via 1:N or N:-1>|<description text>


&F.ISVALIDDRAWCOST.SINGLE #137=u([v(D.FDB)]/F.ISNEGNUM,%0)

&F.ISVALIDDRAWCOST.LIST #137=and(andchr(%0,/),[iter(%0,ifelse(u([v(D.FDB)]/F.ISNEGNUM,itext()),[setq(9,1)],[setq(9,0)][ibreak()]),/)]%q9)

&F.ISVALIDDRAWCOST.RANGE #137=and(andchr(%0,:),[setq(8,before(%0,:))][setq(9,after(%0,:))][and(u([v(D.FDB)]/F.ISNEGNUM,%q8),u([v(D.FDB)]/F.ISNEGNUM,%q9))])

&F.ISVALIDDRAWCOST.PERLVL #137=and(andchr(%0,%bPL),u([v(D.FDB)]/F.ISNEGNUM,before(%0,PL)))

&F.ISVALIDDRAWCOST #137=or(u([v(D.FDB)]/F.ISVALIDDRAWCOST.SINGLE,%0),u([v(D.FDB)]/F.ISVALIDDRAWCOST.LIST,%0),u([v(D.FDB)]/F.ISVALIDDRAWCOST.RANGE,%0),u([v(D.FDB)]/F.ISVALIDDRAWCOST.PERLVL,%0))


&F.DRAWINVALIDCOSTMSG #138=[u(D.CGPREFIX)] The cost specified was not valid. The format must be a single numeric value, a list of values separated by /, a range of values separated by a colon (:) such as 1:5, or a per level cost via in format of a single numeric value followed by a space and 'PL' such as 1 PL.

&F.DRAWEXISTSMSG #138=[u(D.CGPREFIX)] That drawback already exists in the drawbacks database as '[after(%q0,_)]'.

&F.DRAWNOTEXISTSMSG #138=[u(D.CGPREFIX)] That drawback does not exist in the drawbacks database.

&F.DRAWADDMSG #138=[u(D.CGPREFIX)] Added '[ucstr(edit(%0,%b,_))]' drawback with '[caplist(%1)]' long name to the drawbacks database.

&F.DRAWREMMSG #138=[u(D.CGPREFIX)] Removed '[ucstr(after(%q0,_))]' drawback from the drawbacks database.

&F.DRAWSUBEXISTSMSG #138=[u(D.CGPREFIX)] That drawback sub-type already exists in the drawbacks database as '%q4'.

&F.DRAWSUBNOTEXISTSMSG #138=[u(D.CGPREFIX)] That drawback sub-type does not exist in the drawbacks database.

&F.ADDDRAWSUBMSG #138=[u(D.CGPREFIX)] Added '[caplist(%1)]' sub-type to the '[ucstr(after(%q0,_))]' drawback in the drawbacks database.

&F.REMDRAWSUBMSG #138=[u(D.CGPREFIX)] Removed '%q4' sub-type from the '[ucstr(after(%q0,_))]' drawback in the drawbacks database.

&F.DRAWREQNOTECHANGEMSG #138=[u(D.CGPREFIX)] Toggled '[after(%q0,_)]' to [ifelse(%q2,,not%b)]require a note to be set when chosen from the drawbacks database.

&F.DRAWDESCCHANGEDMSG #138=[u(D.CGPREFIX)] The description for the '[after(%q0,_)]' drawback has been set to '%1' in the drawbacks database.

&F.DRAWCOSTCHANGEMSG #138=[u(D.CGPREFIX)] The cost for the '[ucstr(after(%q0,_))]' drawback has been set to '%1' in the drawbacks database.

&F.DRAWHASSUBUSESUBCOSTMSG #138=[u(D.CGPREFIX)] That drawback has sub-drawbacks. Use +draw/subcost <drawback>/<sub>=<cost> to change the individual costs.

&F.DRAWNOTHASSUBUSESUBCOSTMSG #138=[u(D.CGPREFIX)] That drawback does not have sub-drawbacks. Use +draw/cost <drawback>=<cost> to change its cost.

&F.DRAWSUBCOSTCHANGEMSG #138=[u(D.CGPREFIX)] The cost for the '[ucstr(after(%q0,_))]' drawback's '%q4' sub-drawback has been set to '%2' in the drawbacks database.



&c.+draw/add #129=$+draw/add */*:@swi/first [u([v(D.FDB)]/F.MATCHQDSHORT,DRAW, %0)][u([v(D.FDB)]/F.MATCHQDLONG,DRAW,caplist(%1))]=1*,{@pemit %#=[u([v(D.MSGDB)]/F.DRAWEXISTSMSG,%0,%1)]},*1,{@pemit %#=[u([v(D.MSGDB)]/F.DRAWEXISTSMSG,%0,%1)]},00,{@swi/first [u([v(D.FDB)]/F.QDLENGTHCHECK,SHORT,%0)][u([v(D.FDB)]/F.QDLENGTHCHECK,LONG,%1)]=0*,{@pemit %#=[u([v(D.MSGDB)]/F.QDSHORTTOOLONG,%0,%1)]},*0,{@pemit %#=[u([v(D.MSGDB)]/F.QDLONGTOOLONG,%0,%1)]},11,{&DRAW_[edit(%0,%b,_)] [v(D.CGDB)]=[u([v(D.FDB)]/F.ADDQD,caplist(%1))];@pemit %#=[u([v(D.MSGDB)]/F.DRAWADDMSG,%0,%1)]}}

&c.+draw/rem #129=$+draw/rem *:@swi/first u([v(D.FDB)]/F.MATCHQD,DRAW,%0)=0,{@pemit %#=[u([v(D.MSGDB)]/F.DRAWNOTEXISTSMSG,%0)]}, 1,{@wipe [v(D.CGDB)]/%q0;@pemit %#=[u([v(D.MSGDB)]/F.DRAWREMMSG,%0)]}

&c.+draw/addsub #129=$+draw/addsub */*:@swi/first u([v(D.FDB)]/F.MATCHQD,DRAW,%0)=0,{@pemit %#=[u([v(D.MSGDB)]/F.DRAWNOTEXISTSMSG,%0)]}, 1,{@swi/first u([v(D.FDB)]/F.MATCHQDSUB,%q1,%1)=1,{@pemit %#=[u([v(D.MSGDB)]/F.DRAWSUBEXISTSMSG)]}, 0,{&%q0 [v(D.CGDB)]=[u([v(D.FDB)]/F.ADDQDSUB, %q1, caplist(%1))];@pemit %#=[u([v(D.MSGDB)]/F.ADDDRAWSUBMSG,%0, %1)]}}

&c.+draw/remsub #129=$+draw/remsub */*:@swi/first u([v(D.FDB)]/F.MATCHQD,DRAW,%0)=0,{@pemit %#=[u([v(D.MSGDB)]/F.DRAWNOTEXISTSMSG,%0)]}, 1,{@swi/first u([v(D.FDB)]/F.MATCHQDSUB,%q1,caplist(%1))=0,{@pemit %#=[u([v(D.MSGDB)]/F.DRAWSUBNOTEXISTSMSG)]}, 1,{&%q0 [v(D.CGDB)]=[u([v(D.FDB)]/F.REMQDSUB, %q1, %q4, %q3)];@pemit %#=[u([v(D.MSGDB)]/F.REMDRAWSUBMSG,%0, %q4)]}}

&c.+draw/reqnote #129=$+draw/reqnote *:@swi/first u([v(D.FDB)]/F.MATCHQD,DRAW,%0)=0,{@pemit %#=[u([v(D.MSGDB)]/F.DRAWNOTEXISTSMSG,%0)]}, 1,{&%q0 [v(D.CGDB)]=[u([v(D.FDB)]/F.CHANGEQDREQNOTE, %q1)];@pemit %#=[u([v(D.MSGDB)]/F.DRAWREQNOTECHANGEMSG,%0)]}

&c.+draw/cost #129=$+draw/cost *=*:@swi/first u([v(D.FDB)]/F.MATCHQD,DRAW,%0)=0,{@pemit %#=[u([v(D.MSGDB)]/F.DRAWNOTEXISTSMSG,%0,%1)]}, 1,{@swi/first u([V(D.FDB)]/F.HASQDSUB,%q1) = 1,{@pemit %#=[u([v(D.MSGDB)]/F.DRAWHASSUBUSESUBCOSTMSG,%0,%1)]}, 0,{@swi/first u([v(D.FDB)]/F.ISVALIDDRAWCOST,%1)=0,{@pemit %#=[u([v(D.MSGDB)]/F.DRAWINVALIDCOSTMSG,%0,ucstr(%1))]}, 1,{&%q0 [v(D.CGDB)]=[u([v(D.FDB)]/F.CHANGEQDCOST, %q1, ucstr(%1))];@pemit %#=[u([v(D.MSGDB)]/F.DRAWCOSTCHANGEMSG,%0,ucstr(%1))]}}}

&c.+draw/subcost #129=$+draw/subcost */*=*:@swi/first u([v(D.FDB)]/F.MATCHQD,DRAW,%0)=0,{@pemit %#=[u([v(D.MSGDB)]/F.DRAWNOTEXISTSMSG,%0,%1)]}, 1,{@swi/first u([V(D.FDB)]/F.HASQDSUB,%q1) = 0,{@pemit %#=[u([v(D.MSGDB)]/F.DRAWNOTHASSUBUSESUBCOSTMSG,%0,%1)]}, 1, {@swi/first u([v(D.FDB)]/F.MATCHQDSUB,%q1,caplist(%1))=0,{@pemit %#=[u([v(D.MSGDB)]/F.DRAWSUBNOTEXISTSMSG)]}, 1,{@swi/first u([v(D.FDB)]/F.ISVALIDDRAWCOST,%2)=0,{@pemit %#=[u([v(D.MSGDB)]/F.DRAWINVALIDCOSTMSG,%0,%1,ucstr(%2))]}, 1,{&%q0 [v(D.CGDB)]=[u([v(D.FDB)]/F.CHANGEQDSUBCOST, %q1, %q3, ucstr(%2))];@pemit %#=[u([v(D.MSGDB)]/F.DRAWSUBCOSTCHANGEMSG,%0,%1,ucstr(%2))]}}}}

&c.+draw/desc #129=$+draw/desc *=*:@swi/first u([v(D.FDB)]/F.MATCHQD,DRAW,%0)=0,{@pemit %#=[u([v(D.MSGDB)]/F.DRAWNOTEXISTSMSG,%0)]}, 1,{&%q0 [v(D.CGDB)]=[u([v(D.FDB)]/F.CHANGEQDDESC, %q1, %1)];@pemit %#=[u([v(D.MSGDB)]/F.DRAWDESCCHANGEDMSG,%0,%1)]}


@@ --------------------Package DB--------------------
@@ &PKG_<name> =<long name>|<package attrs separated by ~>|<cost>

&D.PKGNAMEIDX #129=1
&D.PKGATTRIDX #129=2
&D.PKGCOSTIDX #129=3


&F.GETPKGATTRS #129=lattr([v(D.CGDB)]/PKG_*)

&F.MATCHPKGLONG #129=iter(u([v(D.FDB)]/F.GETPKGATTRS),ifelse(gt(match(first(get([v(D.CGDB)]/[itext()]),|),%0*),2),[setq(0,itext())][setq(3,get([v(D.CGDB)]/[itext()]))][ibreak()]))

&F.MATCHPKGSHORT #129=ifelse(hasattr([v(D.CGDB)]/PKG_%0),1[setq(3,get([v(D.CGDB)]/setr(2, PKG_%0)))],0)

&F.MATCHPKG #129=or(u([v(D.FDB)]/F.MATCHPKGSHORT,%0),u([v(D.FDB)]/F.MATCHPKGLONG,%0))

&F.ADDPKG #129=%1||


F.PKGEXISTSMSG
F.PKGNOTEXISTSMSG
F.PKGADDMSG
F.PKGREMMSG



&c.+pkg/add #129=$+pkg/add */*:@swi/first [u([v(D.FDB)]/F.MATCHPKGSHORT,%1)][u([v(D.FDB)]/F.MATCHPKGLONG,%1)]=1*,{@pemit %#=[u([v(D.MSGDB)]/F.PKGEXISTSMSG,%0,1)]}, *1, {@pemit %#=[u([v(D.MSGDB)]/F.PKGEXISTSMSG,%0,1)]}, 00,{&PKG_%0 [v(D.CGDB)]=[u([v(D.FDB)]/F.ADDPKG, %0,%1)];@pemit %#=[u([v(D.MSGDB)]/F.PKGADDMSG,%0)]}

&c.+pkg/rem #129=$+pkg/rem *:@swi/first u([v(D.FDB)]/F.MATCHPKG,%0)=0,{@pemit %#=[u([v(D.MSGDB)]/F.PKGNOTEXISTSMSG,%0)]}, 1,{@wipe [v(D.CGDB)]/%q0;@pemit %#=[u([v(D.MSGDB)]/F.PKGREMMSG,%0)]}

&c.+pkg/addqual #129=$+pkg/addqual */*=*:@swi/first u([v(D.FDB)]/F.MATCHPKG,%0)=0,{@pemit %#=[u([v(D.MSGDB)]/F.PKGNOTEXISTSMSG,%0)]}, 1,{@swi/first u([v(D.FDB)]/F.MATCHQD,QUAL,%1)=0,{@pemit %#=[u([v(D.MSGDB)]/F.QUALNOTEXISTSMSG,%0)]}, 1,{&PKG_%q2 [v(D.CGDB)]=[u([v(D.FDB)]/F.PKGADDQUAL,%q1,)]}}

&c.+pkg/remqual #129=$+pkg/remqual */*:

&c.+pkg/adddraw #129=$+pkg/adddraw */*=*:@swi/first u([v(D.FDB)]/F.MATCHPKG,%0)=0,{@pemit %#=[u([v(D.MSGDB)]/F.PKGNOTEXISTSMSG,%0)]}, 1,{@swi/first u([v(D.FDB)]/F.MATCHQD,DRAW,%1)=0,{@pemit %#=[u([v(D.MSGDB)]/F.DRAWNOTEXISTSMSG,%0)]}, 1,{}}

&c.+pkg/remdraw #129=$+pkg/remdraw */*:

&c.+pkg/qdnote #129=$+pkg/qdnote */*=*:




@@ ---------------------Misc stuff----------------------



&F.CANUSE #129=[isstaff(%#)]

@lock/uselock Eldritch Staff Chargen=F.CANUSE/1


&D.CGDB #134=#128

&D.CGDB #129=#128

&D.CGDB #137=#128

&D.CGDB #138=#128

&D.MSGDB #134=#138

&D.MSGDB #129=#138

&D.MSGDB #137=#138

&D.MSGDB #138=#138

&D.FDB #134=#137

&D.FDB #129=#137

&D.FDB #137=#137

&D.FDB #138=#137





@@ &d.attr_vals #128=Strength|Dexterity|Constitution|Intelligence|Perception|Willpower

@@ &d.skill_vals #128=Acrobatics~Balance~Climbing~Contortion~Gymnastics~Jumping~Sneaking~Tumbling|Art~Architecture~Digital Art~Drawing~Painting~Photography~Sculpting|Brawl~Instruction|Computer~Codes~Games~Hacking~Hardware~Programing~Software~Websearch|Control~Automatic~Bicycle~Boat~Helicopter~Horses~Jet~Motorcyle~Semi~Stick|Craft~Construction~Electronics~Mechanic~Metalurgy~Plumbing~Traps~Woodwork|Empathy~Animals~Confidant~Discern~Emotions~Etiquette~Sense Motive|Expression~Cinematography~Direction~Essays~Music~Poetry~Recitation~Scripts~Writing|Influence~Animals~Command~Con~Etiquette~Inspire~Intimidation~Lying~Persuasion~Seduction~Subterfuge|Knowledge~Anthropology~Cooking~Economics~Education~Enigmas~Geography~History~Journalism~Law~Literature~Mathematics~Philosophy~Politics~Psychology~Research~Sociology|Linguistics~Cryptography~Pronounciation~Translation|Larceny~Ambushing~Disguise~Forgery~Intimidation~Legerdemain~Lying~Sabotage~Security~Stealth~Traps|Marksman~Bowyer~Fletcher~Gunsmith~Instruction|Medicine~Anatomy~Diagnosis~Forensics~Paramedic~Pediatrics~Pharmacology~Research~Surgery~Veterinary|Melee~Instruction~Weaponsmith|Notice~Ambushes~Crime Scenes~Details~Hearing~Recall~Sight~Smell~Taste~Touch~Traps|Occult~Demons~Enigmas~History~Primals~Psions~Realms~Research~Thaumatology~Undead|Perform~Acting~Banjo~Dance~Disguise~Drums~Engaging~Flute~Guitar~Lying~Piano~Saxophone~Singing~Violin|Science~Astronomy~Biology~Botany~Chemistry~Ecology~Genetics~Physics~Research~Robotics~Zoology|Sports~Baseball~Basketball~Bowling~Climbing~Football~Hockey~Rodeo~Skating~Skiing~Soccer~Surfing~Swimming~Tennis~Track|Thrown~Instruction~Weaponsmith



@@ @attribute/access D.CG.APPROVED = royalty pinvisible
@@ @attribute/access D.CG.CANRESETSTATS = royalty pinvisible
@dol/delimit | [get([v(D.CGDB)]/D.ATTR_VALS)]={@attribute/access D.ATTR_## = royalty pinvisible}
@dol/delimit | [get([v(D.CGDB)]/D.SKILL_VALS)]={@attribute/access D.SKILL_[first(##,~)] = royalty pinvisible}
